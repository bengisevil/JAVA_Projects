// Virginia Tech Honor Code Pledge:
//
// As a Hokie, I will conduct myself with honor and integrity at all times.
// I will not lie, cheat, or steal, nor will I accept the actions of those who
// do.
// -- Bengi Sevil (bsevil18)
package towersofhanoi;

import java.util.Observable;

/**
 * HanoiSolver class represents the Tower of Hanoi game.
 * 
 * @author Bengi Sevil
 *
 */
public class HanoiSolver extends Observable {
    private Tower left;
    private Tower right;
    private Tower middle;
    private int numDiscs;


    /**
     * HanoiSolver default constructor. Creates a new object of
     * type HanoiSolver and initializes the private fields left,
     * right and middle to the corresponding fields in the Position.
     * numDiscs is initialized to the parameter numDiscs.
     * 
     * @param numDiscs
     *            The total number of discs.
     * 
     */
    public HanoiSolver(int numDiscs) {
        left = new Tower(Position.LEFT);
        right = new Tower(Position.RIGHT);
        middle = new Tower(Position.MIDDLE);
        this.numDiscs = numDiscs;
    }


    /**
     * Returns the numDiscs field.
     * 
     * @return numDiscs
     *         The number of discs.
     */
    public int discs() {
        return numDiscs;
    }


    /**
     * Returns the tower at the given position.
     * 
     * @param pos
     *            The position of the tower.
     * @return tower
     *         Left, right, or middle.
     */
    public Tower getTower(Position pos) {
        switch (pos) {
            case LEFT:
                return left;
            case RIGHT:
                return right;
            case MIDDLE:
                return middle;
            default:
                return left;
        }

    }


    /**
     * Return left , middle, and right’s toString() appended.
     * For example: if the left, middle, right tower each have a
     * single disc with width of 10, 20, and 30 respectively,
     * the output of toString() is “[10][20][30]".
     * 
     * @return The number of discs in all 3 towers in
     *         the [left][middle][right] format.
     */
    public String toString() {
        String str = "[";

        str += "" + left.peek().getWidth();

        return str;
    }


    /**
     * This method executes the specified move. Pop the Disc
     * from the "source" Tower, and push it onto the "destination"
     * Tower.
     * 
     * @param source
     * @param destination
     */
    private void move(Tower source, Tower destination) {
        Disc temp = source.pop();
        destination.push(temp);
        this.setChanged();
        super.notifyObservers(destination.position());
    }


    /**
     * The algorithm to move currentDiscs from startPole to endPole
     * using tempPole as a spare according to the rule of the Towers
     * of Hanoi problem.
     * 
     * @param currentDiscs
     *            The discs on the current pole.
     * @param startPole
     *            Left pole
     * @param tempPole
     *            Middle pole
     * @param endPole
     *            Right pole
     */
    private void solveTowers(
        int currentDiscs,
        Tower startPole,
        Tower tempPole,
        Tower endPole) {

        if (currentDiscs > 0) {
            solveTowers(currentDiscs - 1, startPole, endPole, tempPole);
            solveTowers(currentDiscs - 1, tempPole, startPole, endPole);
        }

    }

}
